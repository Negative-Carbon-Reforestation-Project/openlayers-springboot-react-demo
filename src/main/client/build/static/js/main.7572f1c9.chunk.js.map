{"version":3,"sources":["components/Map/MapContext.js","components/Map/Map.js","components/Layers/Layers.js","components/Layers/TileLayer.js","components/Controls/Controls.js","components/Controls/Zoom.js","resources/images/ncrp-logo.png","components/Logo.js","components/Footer.js","components/Overlays/Overlays.js","components/Overlays/usePopup.js","components/Overlays/Popup.js","App.js","reportWebVitals.js","index.js"],"names":["MapContext","React","createContext","Map","children","zoom","center","mapRef","useRef","useState","map","setMap","useEffect","options","view","ol","layers","controls","overlays","mapObject","setTarget","current","undefined","getView","setZoom","setCenter","Provider","value","ref","className","Layers","TileLayer","source","zIndex","preload","opacity","useContext","tileLayer","OLTileLayer","addLayer","removeLayer","Controls","ZoomControl","zoomControl","Zoom","zoomInClassName","zoomOutClassName","push","remove","Logo","src","logo","alt","Footer","Overlays","usePopup","popupRef","popupCloseButtonRef","popupContent","setPopupContent","popupOverlay","Overlay","element","autoPan","autoPanAnimation","duration","addOverlay","onclick","setPosition","blur","on","event","coordinate","longLatInfo","toLonLat","removeOverlay","Popup","href","App","waSlope","TileWMS","url","params","serverType","transition","waFire","fromLonLat","OSM","Infinity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7572f1c9.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n/**\r\n * React context for OpenLayer Map.\r\n * @type {React.Context<unknown>}\r\n */\r\nconst MapContext = new React.createContext();\r\n\r\nexport default MapContext;","import React, { useRef, useState, useEffect } from \"react\"\r\nimport \"../../styles/Map.css\";\r\nimport MapContext from \"./MapContext\";\r\nimport * as ol from \"ol\";\r\n\r\n/**\r\n * Container for OpenLayer Map\r\n * @param children The child components\r\n * @param zoom Initial resolution for the view\r\n * @param center Initial center for the view\r\n * @returns {JSX.Element}\r\n */\r\nconst Map = ({ children, zoom, center }) => {\r\n    const mapRef = useRef();\r\n    const [map, setMap] = useState(null);\r\n\r\n    /**\r\n     * Once the component is mounted onto the DOM, construct a new map with the given view.\r\n     */\r\n    useEffect(() => {\r\n        let options = {\r\n            view: new ol.View({ zoom, center }),\r\n            layers: [],\r\n            controls: [],\r\n            overlays: []\r\n        };\r\n\r\n        let mapObject = new ol.Map(options);\r\n        mapObject.setTarget(mapRef.current);\r\n        setMap(mapObject);\r\n\r\n        return () => mapObject.setTarget(undefined);\r\n    }, []);\r\n\r\n    /**\r\n     * Once the component is mounted onto the DOM, set the zoom level on the map.\r\n     * If the state of zoom changes, this function is called again.\r\n     */\r\n    useEffect(() => {\r\n        if (!map)\r\n        {\r\n            return;\r\n        }\r\n\r\n        map.getView().setZoom(zoom);\r\n    }, [zoom]);\r\n\r\n    /**\r\n     * Once the component is mounted onto the DOM, center the view on the map.\r\n     * If the state of center changes, this function is called again.\r\n     */\r\n    useEffect(() => {\r\n        if (!map)\r\n        {\r\n            return;\r\n        }\r\n\r\n        map.getView().setCenter(center)\r\n    }, [center])\r\n\r\n\r\n    return (\r\n        <MapContext.Provider value={{ map }}>\r\n            <div ref={mapRef} className=\"ol-map\">\r\n                {children}\r\n            </div>\r\n        </MapContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Map;","import React from \"react\";\r\n\r\n/**\r\n * Container for custom OpenLayer layers\r\n * @param children The child components\r\n * @returns {JSX.Element}\r\n */\r\nconst Layers = ({ children }) => {\r\n    return <div>{children}</div>;\r\n};\r\n\r\nexport default Layers;","import { useContext, useEffect } from \"react\";\r\nimport MapContext from \"../Map/MapContext\";\r\nimport OLTileLayer from \"ol/layer/Tile\";\r\n\r\n/**\r\n * Container for custom OpenLayer TileLayers\r\n * @param source The source image(s) for this layer.\r\n * @param zIndex The z-index for layer rendering. Determines positioning of layers, default is 0.\r\n * @param preload The tiles to be preloaded, default is 0.\r\n * @param opacity The opacity for the tile, default is 1.\r\n * @returns {null}\r\n */\r\nconst TileLayer = ({ source, zIndex = 0, preload = 0, opacity=1}) => {\r\n    const { map } = useContext(MapContext);\r\n\r\n    /**\r\n     * Once the component is mounted onto the dom, construct a new tilelayer and append it\r\n     * to the map using the shared MapContext.\r\n     */\r\n    useEffect(() => {\r\n        if (!map)\r\n        {\r\n            return;\r\n        }\r\n\r\n        let tileLayer = new OLTileLayer({\r\n            source,\r\n            zIndex,\r\n            preload,\r\n            opacity\r\n        });\r\n\r\n        map.addLayer(tileLayer);\r\n\r\n        return () => {\r\n            if (map)\r\n            {\r\n                map.removeLayer(tileLayer);\r\n            }\r\n        };\r\n\r\n    }, [map]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default TileLayer;","import React from \"react\";\r\n\r\n/**\r\n * Container for custom OpenLayer controls\r\n * @param children The child components\r\n * @returns {JSX.Element}\r\n */\r\nconst Controls = ({ children }) => {\r\n    return <div>{children}</div>;\r\n};\r\n\r\nexport default Controls;","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Zoom } from \"ol/control\";\r\nimport MapContext from \"../Map/MapContext\";\r\n\r\nimport \"../../styles/Control.css\"\r\nimport \"../../styles/Zoom.css\"\r\n\r\n/**\r\n * Component for custom OpenLayer zoom control.\r\n * @returns {null}\r\n */\r\nconst ZoomControl = () => {\r\n    const { map } = useContext(MapContext);\r\n\r\n    /**\r\n     * Once the component is mounted onto the DOM, extend the zoom control and append it onto the map\r\n     * using the shared MapContext. If the state of map changes, this function is called again.\r\n     */\r\n    useEffect(() => {\r\n        if (!map)\r\n        {\r\n            return;\r\n        }\r\n\r\n        let zoomControl = new Zoom({\r\n            className: \"ol-zoom\",\r\n            zoomInClassName: \"control ol-zoom-in\",\r\n            zoomOutClassName: \"control ol-zoom-out\"\r\n        });\r\n\r\n        map.controls.push(zoomControl);\r\n\r\n        return () => map.controls.remove(zoomControl);\r\n    }, [map])\r\n\r\n    return null;\r\n};\r\n\r\nexport default ZoomControl;","export default __webpack_public_path__ + \"static/media/ncrp-logo.a4a9c4e1.png\";","import React from \"react\";\r\nimport logo from \"../resources/images/ncrp-logo.png\"\r\nimport \"../styles/Logo.css\"\r\n\r\n/**\r\n * Container for site logo\r\n * @returns {JSX.Element}\r\n */\r\nconst Logo = () => {\r\n    return <img src={logo} className=\"app-logo\" alt=\"app-logo\"/>\r\n}\r\n\r\nexport default Logo;","import React from \"react\";\r\nimport \"../styles/Footer.css\";\r\n\r\n/**\r\n * Container for custom Footer\r\n * @param children The child components\r\n * @returns {JSX.Element}\r\n */\r\nconst Footer = ({ children }) => {\r\n    return <footer>{children}</footer>\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\n\r\n/**\r\n * Container for custom OpenLayer overlays\r\n * @param children The child components\r\n * @returns {JSX.Element}\r\n */\r\nconst Overlays = ({ children }) => {\r\n    return <div>{children}</div>;\r\n};\r\n\r\nexport default Overlays;","import { useState, useEffect, useRef, useContext } from \"react\";\r\nimport {Overlay} from \"ol\";\r\nimport MapContext from \"../Map/MapContext\";\r\nimport {toLonLat} from \"ol/proj\";\r\n\r\n/**\r\n * Container for custom popup logic\r\n * @returns {{popupContent: JSX.Element, popupCloseButtonRef: React.MutableRefObject<undefined>, popupRef: React.MutableRefObject<undefined>}}\r\n */\r\nconst usePopup = () => {\r\n    const { map } = useContext(MapContext);\r\n    const popupRef = useRef();\r\n    const popupCloseButtonRef = useRef();\r\n    const [popupContent, setPopupContent] = useState(<div></div>);\r\n\r\n    /**\r\n     * Once the component is mounted onto the DOM, create the overlay and populate it via a click listener on the map.\r\n     * Add a click listener for the popup closer as well.\r\n     */\r\n    useEffect(() => {\r\n        if (!map)\r\n        {\r\n            return;\r\n        }\r\n\r\n        let popupOverlay = new Overlay({\r\n            element: popupRef.current,\r\n            autoPan: true,\r\n            autoPanAnimation: { duration: 250 }\r\n        })\r\n\r\n        map.addOverlay(popupOverlay);\r\n\r\n        popupCloseButtonRef.current.onclick = () => {\r\n            popupOverlay.setPosition(undefined);\r\n            popupCloseButtonRef.current.blur();\r\n            return false;\r\n        };\r\n\r\n        map.on(\"singleclick\", function (event) {\r\n\r\n            const coordinate = event.coordinate;\r\n            const longLatInfo = toLonLat(coordinate);\r\n\r\n            setPopupContent(\r\n                <div>\r\n                    <p>You clicked here:</p>\r\n                    <code>Long: {longLatInfo[0]}</code>\r\n                    <br/>\r\n                    <code>Lat: {longLatInfo[1]}</code>\r\n                </div>\r\n            );\r\n\r\n            // setPopupContent(<div className={\"loader\"}></div>)\r\n\r\n\r\n\r\n            popupOverlay.setPosition(coordinate);\r\n        });\r\n\r\n        return () => {\r\n            if (map)\r\n            {\r\n                map.removeOverlay(popupOverlay);\r\n            }\r\n        };\r\n\r\n    }, [map]);\r\n\r\n    return { popupRef, popupCloseButtonRef, popupContent };\r\n};\r\n\r\nexport default usePopup;","import React from \"react\";\r\nimport usePopup from \"./usePopup\";\r\nimport \"../../styles/Popup.css\"\r\n\r\n/**\r\n * Container for OpenLayer custom popup.\r\n * @returns {JSX.Element}\r\n */\r\nconst Popup = () => {\r\n    const { popupRef, popupCloseButtonRef, popupContent } = usePopup();\r\n\r\n    return (\r\n        <div className=\"ol-popup\" ref={popupRef}>\r\n            <a href=\"#\" className=\"ol-popup__closeButton\" ref={popupCloseButtonRef}/>\r\n            <div className=\"ol-popup__content\">{popupContent}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Popup;\r\n","import React, { useState } from 'react';\r\nimport './styles/App.css';\r\n\r\nimport Map from \"./components/Map/Map\";\r\nimport Layers from \"./components/Layers/Layers\";\r\nimport TileLayer from \"./components/Layers/TileLayer\";\r\nimport Controls from \"./components/Controls/Controls\";\r\nimport ZoomControl from \"./components/Controls/Zoom\";\r\nimport Logo from \"./components/Logo\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nimport { OSM, TileWMS } from \"ol/source\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport Overlays from \"./components/Overlays/Overlays\";\r\nimport Popup from \"./components/Overlays/Popup\";\r\n\r\n/**\r\n * Component for the React applicaation\r\n * @returns {JSX.Element}\r\n */\r\nconst App = () => {\r\n    const washingtonCoordinates = [-122.29567670312974, 47.41311574557329];\r\n    const [center, setCenter] = useState(washingtonCoordinates);\r\n    const [zoom, setZoom] = useState(6);\r\n\r\n    const waSlope = new TileWMS({\r\n        url: 'http://ncrp-geoserver:80/geoserver/wms',\r\n        params: {'LAYERS': 'ncrp:wa_slope', 'TILED': true},\r\n        serverType: 'geoserver',\r\n        transition: 0,\r\n    });\r\n\r\n    const waFire = new TileWMS({\r\n        url: 'http://ncrp-geoserver:80/geoserver/wms',\r\n        params: {'LAYERS': 'ncrp:wa_fire_history', 'TILED': true},\r\n        serverType: 'geoserver',\r\n        transition: 0,\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Logo />\r\n\r\n            <Map center={fromLonLat(center)} zoom={zoom}>\r\n                <Layers>\r\n                    <TileLayer source={new OSM()} zIndex={0} preload={Infinity} />\r\n                    <TileLayer source={waSlope} zIndex={1} opacity={.6}/>\r\n                    <TileLayer source={waFire} zIndex={2} />\r\n                </Layers>\r\n                <Overlays>\r\n                    <Popup />\r\n                </Overlays>\r\n                <Controls>\r\n                    <ZoomControl />\r\n                </Controls>\r\n            </Map>\r\n\r\n            <Footer>\r\n                <p className=\"footer__copyright-info\">© NCRP Contributors</p>\r\n            </Footer>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}